name: Firmware Extraction and System Image Extraction

on:
  workflow_dispatch:
    inputs:
      firmware_url:
        description: 'URL of the firmware (e.g., a zip file or a payload.bin)'
        required: true
        default: 'https://example.com/path/to/firmware.zip'

jobs:
  extract_firmware_and_system_img:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repo
    - name: Checkout repository
      uses: actions/checkout@v3

    # Install required dependencies
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y xz-utils unzip git python3

    # Clone the payload-dumper-go repository
    - name: Clone payload-dumper-go
      run: git clone https://github.com/ssut/payload-dumper-go.git

    # Build the payload-dumper-go binary
    - name: Build payload-dumper-go
      run: |
        cd payload-dumper-go
        go build -o payload-dumper-go .
        if [ ! -f "payload-dumper-go" ]; then
          echo "payload-dumper-go build failed"
          exit 1
        fi

    # Download the firmware archive or payload.bin from the given URL
    - name: Download firmware archive
      run: |
        wget -O firmware.zip ${{ github.event.inputs.firmware_url }}

    # Extract firmware archive (if it's a zip)
    - name: Extract firmware archive
      run: |
        if [[ "${{ github.event.inputs.firmware_url }}" == *.zip ]]; then
          unzip firmware.zip
        fi

    # Extract partitions from payload.bin if found in the firmware
    - name: Extract partitions from payload.bin
      run: |
        if [ -f "payload.bin" ]; then
          ./payload-dumper-go payload.bin
        fi

    # Download sdat2img.py from the specified repository
    - name: Download sdat2img.py
      run: |
        wget https://raw.githubusercontent.com/amitkumarroushan/xxx.dat.br2folder/master/sdat2img.py

    # Check for system.new.dat and system.new.dat.br and convert if found
    - name: Convert system images
      run: |
        if [ -f "system.new.dat" ] || [ -f "system.new.dat.br" ]; then
          if [ -f "system.new.dat.br" ]; then
            python3 sdat2img.py system.new.dat.br system.img
          fi
          if [ -f "system.new.dat" ]; then
            python3 sdat2img.py system.new.dat system.img
          fi
        else
          echo "system.new.dat or system.new.dat.br not found."
        fi

    # Create output directory
    - name: Create output directory
      run: mkdir -p output

    # Move extracted images to output directory
    - name: Move extracted images to output
      run: |
        if [ -f "system.img" ]; then
          mv system.img output/
        fi
        # Add any additional image files you want to move to the output directory here

    # Upload extracted files as artifacts
    - name: Upload extracted files
      uses: actions/upload-artifact@v3
      with:
        name: extracted-files
        path: output/
