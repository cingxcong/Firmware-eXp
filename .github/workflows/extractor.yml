name: Firmware Extraction 

on:
  workflow_dispatch:
    inputs:
      firmware_url:
        description: 'URL of the firmware (e.g., a zip file or a payload.bin)'
        required: true
        default: 'https://example.com/path/to/firmware.zip'

jobs:
  extract_firmware:
    runs-on: ubuntu-latest

    steps:
    # Checkout the repo
    - name: Checkout repository
      uses: actions/checkout@v3

    # Install required dependencies
    - name: Install xz, unzip, and python3
      run: sudo apt-get update && sudo apt-get install -y xz-utils unzip git python3

    # Clone the payload-dumper-go repository
    - name: Clone payload-dumper-go
      run: git clone https://github.com/ssut/payload-dumper-go.git

    # Build the payload-dumper-go binary
    - name: Build payload-dumper-go
      run: |
        cd payload-dumper-go
        go build -o payload-dumper-go .

    # Download the firmware archive or payload.bin from the given URL
    - name: Download firmware archive
      run: wget -O firmware.zip ${{ github.event.inputs.firmware_url }}

    # Extract firmware archive (if it's a zip)
    - name: Extract firmware archive
      run: |
        if [[ "${{ github.event.inputs.firmware_url }}" == *.zip ]]; then
          unzip firmware.zip
        fi

    # Extract partitions from payload.bin if found in the firmware
    - name: Extract partitions from payload.bin
      run: |
        if [ -f "payload.bin" ]; then
          ./payload-dumper-go payload.bin
        fi

    # Extract system images if system.new.dat or system.new.dat.br is found
    - name: Extract system images from .dat files
      run: |
        if [ -f "system.new.dat" ] || [ -f "system.new.dat.br" ]; then
          # Check for the transfer list file
          if [ -f "transfer.list" ]; then
            OUTPUT_IMAGE_FILE="system.img"
            if [ -f "system.new.dat.br" ]; then
              python3 sdat2img.py transfer.list system.new.dat.br "$OUTPUT_IMAGE_FILE"
            else
              python3 sdat2img.py transfer.list system.new.dat "$OUTPUT_IMAGE_FILE"
            fi
          else
            echo "Error: transfer.list file not found."
            exit 1
          fi
        fi

    # Extract other image files from the firmware (if present)
    - name: Extract images from archive
      run: |
        if [[ -f "firmware.zip" && ! -f "payload.bin" ]]; then
          mkdir -p extracted_images
          unzip firmware.zip -d extracted_images
        fi

    # Move recovery.img to output folder if it exists
    - name: Move recovery.img to output
      run: |
        mkdir -p output
        if [ -f "recovery.img" ]; then
          mv recovery.img output/
        fi

    # Upload recovery.img as an artifact
    - name: Upload recovery.img
      uses: actions/upload-artifact@v3
      with:
        name: recovery-img
        path: output/recovery.img

    # Upload the extracted system image as an artifact
    - name: Upload system image
      if: success() && steps.move-recovery-img.outputs.exists == 'true'
      run: |
        if [ -f "system.img" ]; then
          echo "Uploading system.img"
          mkdir -p output
          cp system.img output/
        fi
      uses: actions/upload-artifact@v3
      with:
        name: system-img
        path: output/system.img

    # Upload other extracted images as artifacts
    - name: Upload extracted images
      uses: actions/upload-artifact@v3
      with:
        name: extracted-images
        path: extracted_images/**

    # Optionally, upload all images in the output directory
    - name: Upload all output images
      uses: actions/upload-artifact@v3
      with:
        name: all-output-images
        path: output/**
